Mandatory part
Implement the following containers using c++98 standard and turn in the necessary <container>.hpp files with a Makefile:
• vector  (Don't do the vector<bool> specialization)
• map
• stack -> It will use your vector class as default underlying container. But it must still be
compatible with other containers, the STL ones included.
You also have to implement:
• std::iterator_traits
• std::reverse_iterator
• std::enable_if  implement with c++98 standard

This is asked so you can discover SFINAE.
• std::is_integral
• std::equal and/or std::lexicographical_compare
• std::pair
• std::make_pair

1 Requirements
• The namespace must be ft.
• Each inner data structure used in your containers must be logical and justified (this
means using a simple array for map is not ok).
• You cannot implement more public functions than the ones offered in the standard
containers. Everything else must be private or protected. Each public function or
variable must be justified.
• All the member functions, non-member functions and overloads of the standard
containers are expected.
• You must follow the original naming. Take care of details.
• If the container has an iterator system, you must implement it.
• You must use std::allocator.
• For non-member overloads, the keyword friend is allowed. Each use of friend
must be justified and will be checked during evaluation.
• Of course, for the implementation of std::map::value_compare, the keyword
friend is allowed.